// Code generated by BobGen psql v0.31.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/gofrs/uuid/v5"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Todo is an object representing the database table.
type Todo struct {
	ID        uuid.UUID `db:"id,pk" `
	UserID    uuid.UUID `db:"user_id" `
	Title     string    `db:"title" `
	Content   string    `db:"content" `
	CreatedAt time.Time `db:"created_at" `
	UpdatedAt time.Time `db:"updated_at" `

	R todoR `db:"-" `
}

// TodoSlice is an alias for a slice of pointers to Todo.
// This should almost always be used instead of []*Todo.
type TodoSlice []*Todo

// Todos contains methods to work with the todos table
var Todos = psql.NewTablex[*Todo, TodoSlice, *TodoSetter]("", "todos")

// TodosQuery is a query on the todos table
type TodosQuery = *psql.ViewQuery[*Todo, TodoSlice]

// todoR is where relationships are stored.
type todoR struct {
	User *User // todos.todos_user_id_fkey
}

type todoColumnNames struct {
	ID        string
	UserID    string
	Title     string
	Content   string
	CreatedAt string
	UpdatedAt string
}

var TodoColumns = buildTodoColumns("todos")

type todoColumns struct {
	tableAlias string
	ID         psql.Expression
	UserID     psql.Expression
	Title      psql.Expression
	Content    psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c todoColumns) Alias() string {
	return c.tableAlias
}

func (todoColumns) AliasedAs(alias string) todoColumns {
	return buildTodoColumns(alias)
}

func buildTodoColumns(alias string) todoColumns {
	return todoColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		UserID:     psql.Quote(alias, "user_id"),
		Title:      psql.Quote(alias, "title"),
		Content:    psql.Quote(alias, "content"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type todoWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	UserID    psql.WhereMod[Q, uuid.UUID]
	Title     psql.WhereMod[Q, string]
	Content   psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (todoWhere[Q]) AliasedAs(alias string) todoWhere[Q] {
	return buildTodoWhere[Q](buildTodoColumns(alias))
}

func buildTodoWhere[Q psql.Filterable](cols todoColumns) todoWhere[Q] {
	return todoWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](cols.ID),
		UserID:    psql.Where[Q, uuid.UUID](cols.UserID),
		Title:     psql.Where[Q, string](cols.Title),
		Content:   psql.Where[Q, string](cols.Content),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var TodoErrors = &todoErrors{
	ErrUniqueTodosPkey: &UniqueConstraintError{s: "todos_pkey"},
}

type todoErrors struct {
	ErrUniqueTodosPkey *UniqueConstraintError
}

// TodoSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TodoSetter struct {
	ID        omit.Val[uuid.UUID] `db:"id,pk" `
	UserID    omit.Val[uuid.UUID] `db:"user_id" `
	Title     omit.Val[string]    `db:"title" `
	Content   omit.Val[string]    `db:"content" `
	CreatedAt omit.Val[time.Time] `db:"created_at" `
	UpdatedAt omit.Val[time.Time] `db:"updated_at" `
}

func (s TodoSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.Content.IsUnset() {
		vals = append(vals, "content")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s TodoSetter) Overwrite(t *Todo) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.Content.IsUnset() {
		t.Content, _ = s.Content.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s *TodoSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Todos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Title.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Title)
		}

		if s.Content.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Content)
		}

		if s.CreatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TodoSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TodoSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "title")...),
			psql.Arg(s.Title),
		}})
	}

	if !s.Content.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content")...),
			psql.Arg(s.Content),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindTodo retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTodo(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Todo, error) {
	if len(cols) == 0 {
		return Todos.Query(
			SelectWhere.Todos.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Todos.Query(
		SelectWhere.Todos.ID.EQ(IDPK),
		sm.Columns(Todos.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TodoExists checks the presence of a single record by primary key
func TodoExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return Todos.Query(
		SelectWhere.Todos.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Todo is retrieved from the database
func (o *Todo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Todos.AfterSelectHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Todos.AfterInsertHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, TodoSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, TodoSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Todo
func (o *Todo) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Todo) pkEQ() dialect.Expression {
	return psql.Quote("todos", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Todo
func (o *Todo) Update(ctx context.Context, exec bob.Executor, s *TodoSetter) error {
	v, err := Todos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Todo record with an executor
func (o *Todo) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Todos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Todo using the executor
func (o *Todo) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Todos.Query(
		SelectWhere.Todos.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TodoSlice is retrieved from the database
func (o TodoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Todos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Todos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TodoSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("todos", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TodoSlice) copyMatchingRows(from ...*Todo) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TodoSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Todos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Todo:
				o.copyMatchingRows(retrieved)
			case []*Todo:
				o.copyMatchingRows(retrieved...)
			case TodoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Todo or a slice of Todo
				// then run the AfterUpdateHooks on the slice
				_, err = Todos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TodoSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Todos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Todo:
				o.copyMatchingRows(retrieved)
			case []*Todo:
				o.copyMatchingRows(retrieved...)
			case TodoSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Todo or a slice of Todo
				// then run the AfterDeleteHooks on the slice
				_, err = Todos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TodoSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TodoSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Todos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TodoSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Todos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TodoSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Todos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type todoJoins[Q dialect.Joinable] struct {
	typ  string
	User func(context.Context) modAs[Q, userColumns]
}

func (j todoJoins[Q]) aliasedAs(alias string) todoJoins[Q] {
	return buildTodoJoins[Q](buildTodoColumns(alias), j.typ)
}

func buildTodoJoins[Q dialect.Joinable](cols todoColumns, typ string) todoJoins[Q] {
	return todoJoins[Q]{
		typ:  typ,
		User: todosJoinUser[Q](cols, typ),
	}
}

func todosJoinUser[Q dialect.Joinable](from todoColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// User starts a query for related objects on users
func (o *Todo) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os TodoSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.UserID)
	}

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Todo) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("todo cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Todos = TodoSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("todo has no relationship %q", name)
	}
}

func PreloadTodoUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Todos,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Todos.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadTodoUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTodoUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TodoUser", retrieved)
		}

		err := loader.LoadTodoUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTodoUser loads the todo's User into the .R struct
func (o *Todo) LoadTodoUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Todos = TodoSlice{o}

	o.R.User = related
	return nil
}

// LoadTodoUser loads the todo's User into the .R struct
func (os TodoSlice) LoadTodoUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Todos = append(rel.R.Todos, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func attachTodoUser0(ctx context.Context, exec bob.Executor, count int, todo0 *Todo, user1 *User) (*Todo, error) {
	setter := &TodoSetter{
		UserID: omit.From(user1.ID),
	}

	err := todo0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachTodoUser0: %w", err)
	}

	return todo0, nil
}

func (todo0 *Todo) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachTodoUser0(ctx, exec, 1, todo0, user1)
	if err != nil {
		return err
	}

	todo0.R.User = user1

	user1.R.Todos = append(user1.R.Todos, todo0)

	return nil
}

func (todo0 *Todo) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachTodoUser0(ctx, exec, 1, todo0, user1)
	if err != nil {
		return err
	}

	todo0.R.User = user1

	user1.R.Todos = append(user1.R.Todos, todo0)

	return nil
}
