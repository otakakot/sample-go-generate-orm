package xo

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Migration represents a row from 'public.migrations'.
type Migration struct {
	ID        int       `json:"id"`         // id
	Name      string    `json:"name"`       // name
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Migration] exists in the database.
func (m *Migration) Exists() bool {
	return m._exists
}

// Deleted returns true when the [Migration] has been marked for deletion
// from the database.
func (m *Migration) Deleted() bool {
	return m._deleted
}

// Insert inserts the [Migration] to the database.
func (m *Migration) Insert(ctx context.Context, db DB) error {
	switch {
	case m._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case m._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO public.migrations (` +
		`name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`
	// run
	logf(sqlstr, m.Name, m.CreatedAt, m.UpdatedAt)
	if err := db.QueryRowContext(ctx, sqlstr, m.Name, m.CreatedAt, m.UpdatedAt).Scan(&m.ID); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Update updates a [Migration] in the database.
func (m *Migration) Update(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case m._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.migrations SET ` +
		`name = $1, created_at = $2, updated_at = $3 ` +
		`WHERE id = $4`
	// run
	logf(sqlstr, m.Name, m.CreatedAt, m.UpdatedAt, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.Name, m.CreatedAt, m.UpdatedAt, m.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Migration] to the database.
func (m *Migration) Save(ctx context.Context, db DB) error {
	if m.Exists() {
		return m.Update(ctx, db)
	}
	return m.Insert(ctx, db)
}

// Upsert performs an upsert for [Migration].
func (m *Migration) Upsert(ctx context.Context, db DB) error {
	switch {
	case m._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.migrations (` +
		`id, name, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`name = EXCLUDED.name, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, m.ID, m.Name, m.CreatedAt, m.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID, m.Name, m.CreatedAt, m.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	m._exists = true
	return nil
}

// Delete deletes the [Migration] from the database.
func (m *Migration) Delete(ctx context.Context, db DB) error {
	switch {
	case !m._exists: // doesn't exist
		return nil
	case m._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.migrations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, m.ID)
	if _, err := db.ExecContext(ctx, sqlstr, m.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	m._deleted = true
	return nil
}

// MigrationByID retrieves a row from 'public.migrations' as a [Migration].
//
// Generated from index 'migrations_pkey'.
func MigrationByID(ctx context.Context, db DB, id int) (*Migration, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, created_at, updated_at ` +
		`FROM public.migrations ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	m := Migration{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&m.ID, &m.Name, &m.CreatedAt, &m.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &m, nil
}
