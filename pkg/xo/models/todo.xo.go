package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// Todo represents a row from 'public.todos'.
type Todo struct {
	ID        uuid.UUID `json:"id"`         // id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	Title     string    `json:"title"`      // title
	Content   string    `json:"content"`    // content
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Todo] exists in the database.
func (t *Todo) Exists() bool {
	return t._exists
}

// Deleted returns true when the [Todo] has been marked for deletion
// from the database.
func (t *Todo) Deleted() bool {
	return t._deleted
}

// Insert inserts the [Todo] to the database.
func (t *Todo) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.todos (` +
		`id, user_id, title, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, t.ID, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Update updates a [Todo] in the database.
func (t *Todo) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.todos SET ` +
		`user_id = $1, title = $2, content = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Todo] to the database.
func (t *Todo) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for [Todo].
func (t *Todo) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.todos (` +
		`id, user_id, title, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, title = EXCLUDED.title, content = EXCLUDED.content, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, t.ID, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.UserID, t.Title, t.Content, t.CreatedAt, t.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the [Todo] from the database.
func (t *Todo) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.todos ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TodoByID retrieves a row from 'public.todos' as a [Todo].
//
// Generated from index 'todos_pkey'.
func TodoByID(ctx context.Context, db DB, id uuid.UUID) (*Todo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, content, created_at, updated_at ` +
		`FROM public.todos ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	t := Todo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.UserID, &t.Title, &t.Content, &t.CreatedAt, &t.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// User returns the User associated with the [Todo]'s (UserID).
//
// Generated from foreign key 'todos_user_id_fkey'.
func (t *Todo) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, t.UserID)
}
