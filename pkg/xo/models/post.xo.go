package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// Post represents a row from 'public.posts'.
type Post struct {
	ID        uuid.UUID `json:"id"`         // id
	UserID    uuid.UUID `json:"user_id"`    // user_id
	Title     string    `json:"title"`      // title
	Content   string    `json:"content"`    // content
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Post] exists in the database.
func (p *Post) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Post] has been marked for deletion
// from the database.
func (p *Post) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Post] to the database.
func (p *Post) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.posts (` +
		`id, user_id, title, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, p.ID, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Post] in the database.
func (p *Post) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.posts SET ` +
		`user_id = $1, title = $2, content = $3, created_at = $4, updated_at = $5 ` +
		`WHERE id = $6`
	// run
	logf(sqlstr, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Post] to the database.
func (p *Post) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Post].
func (p *Post) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.posts (` +
		`id, user_id, title, content, created_at, updated_at` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (id) DO ` +
		`UPDATE SET ` +
		`user_id = EXCLUDED.user_id, title = EXCLUDED.title, content = EXCLUDED.content, created_at = EXCLUDED.created_at, updated_at = EXCLUDED.updated_at `
	// run
	logf(sqlstr, p.ID, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.UserID, p.Title, p.Content, p.CreatedAt, p.UpdatedAt); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Post] from the database.
func (p *Post) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.posts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PostByID retrieves a row from 'public.posts' as a [Post].
//
// Generated from index 'posts_pkey'.
func PostByID(ctx context.Context, db DB, id uuid.UUID) (*Post, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, content, created_at, updated_at ` +
		`FROM public.posts ` +
		`WHERE id = $1`
	// run
	logf(sqlstr, id)
	p := Post{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.UserID, &p.Title, &p.Content, &p.CreatedAt, &p.UpdatedAt); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// User returns the User associated with the [Post]'s (UserID).
//
// Generated from foreign key 'posts_user_id_fkey'.
func (p *Post) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, p.UserID)
}
